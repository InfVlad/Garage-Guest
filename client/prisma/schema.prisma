// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  username      String?   @unique
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  isActivated   Boolean   @default(false) @map("is_active")
  role          RoleType  @default(guest)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id        Int       @id @default(autoincrement())
  dni       String    @unique
  firstName String    @map("first_name")
  lastName  String    @map("last_name")
  email     String    @unique
  phone     String
  address   String
  city      String
  isActive  Boolean   @default(true) @map("is_active")
  vehicles  Vehicle[]
}

model Vehicle {
  id          Int      @id @default(autoincrement())
  plate       String   @unique
  brand       String
  model       String
  comments    String?
  vehicleType String   @map("vehicle_type")
  mileage     String
  year        String
  color       String
  doors       String
  isActive    Boolean  @default(true) @map("is_active")
  customerId  Int      @map("customer_id")
  customer    Customer @relation(fields: [customerId], references: [id])
  orders      Order[]
}

model Workshop {
  id      Int     @id @default(autoincrement())
  nit     String
  name    String
  address String
  email   String
  phone   String
  orders  Order[]
}

model Order {
  id            Int            @id @default(autoincrement())
  entryDate     DateTime       @map("entry_date")
  departureDate DateTime       @map("departure_date")
  deadline      DateTime
  cost          Float
  workshopId    Int            @map("workshop_id")
  mechanicId    Int            @map("mechanic_id")
  vehicleId     Int            @map("vehicle_id")
  employeeId    Int            @map("employees_id")
  workshop      Workshop       @relation(fields: [workshopId], references: [id])
  mechanic      Mechanic       @relation(fields: [mechanicId], references: [id])
  vehicle       Vehicle        @relation(fields: [vehicleId], references: [id])
  employees     Employee       @relation(fields: [employeeId], references: [id])
  status        Status         @default(pending)
  orderServices OrderService[]
}

model Mechanic {
  id       Int     @id @default(autoincrement())
  dni      String  @unique
  name     String
  address  String
  city     String
  phone    String
  isActive Boolean @default(true) @map("is_active")
  orders   Order[]
}

model Service {
  id            Int            @id @default(autoincrement())
  serviceCode   String         @map("service_code")
  service       String
  description   String
  servicePrice  Float          @map("service_price")
  isActive      Boolean        @default(true) @map("is_active")
  orderServices OrderService[]
}

model OrderService {
  id        Int     @id @default(autoincrement())
  orderId   Int     @map("order_id")
  serviceId Int     @map("service_id")
  order     Order   @relation(fields: [orderId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])
}

model Employee {
  id       Int     @id @default(autoincrement())
  dni      String  @unique
  name     String
  address  String
  city     String
  phone    String
  isActive Boolean @default(true) @map("is_active")
  orders   Order[]
}

enum RoleType {
  guest
  user
  admin
}

enum Status {
  pending
  inProgress
  finished
}
